! ===================================================================
! Gramatica Desenvolvida para disciplina 
! EXA869 - MI Processadores de Linguagem de Programação
! ===================================================================


"Case Sensitive" = True
"Start Symbol"   = <Program>


! ------------------------------------------------- Terminals

Identifier    = {Letter}({AlphaNumeric} | '_')*
{String Chars} = {Printable} + {HT} - ["\]
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
{Hex Digit}      = {Digit} + [abcdefABCDEF]
{Oct Digit}      = [01234567]
DecLiteral       = [123456789]{digit}*
OctLiteral       = 0{Oct Digit}*
HexLiteral       = 0x{Hex Digit}+
FloatLiteral     = {Digit}*'.'{Digit}+

<Number> ::= DecLiteral 
          | OctLiteral 
          | HexLiteral 
          | FloatLiteral
<PrefixGlobalLocal> ::= 'global.' | 'local.' 

! ===================================================================
! Comments
! ===================================================================

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'


! ===================================================================
! Start 
! ===================================================================

<Program> ::= <Const Decl><Var Decl><Decls><Start> 

<Start> ::= 'start' '()' '{' <Body Procedure> '}' <Decls> 
        
<Decls> ::= <Decl> <Decls> | 
          

<Decl>  ::= <Function Declaration>
          | <Proc Decl>
          | <Struct Decl>
          | <Typedef Decl>

             
! ===================================================================
! Paramters List
! ===================================================================
<Formal Parameter List> ::= <Formal Parameter Item> 
                         | <Formal Parameter Item> ',' <Formal Parameter List>
                         
<Formal Parameter Item> ::= Identifier 
                         | StringLiteral 
                         | <Number>
      

<Formal Parameter List Read> ::=  Identifier 
                              | <Formal Parameter List Read> ',' Identifier

             
! ===================================================================
! Function  Declaration
! ==================================================================


<Function Declaration> ::= 'function' <Type> Identifier '(' <Params> ')' '{' <Body> '}'

! ===================================================================
! Procedure  Declaration
! ===================================================================               

<Proc Decl> ::= 'procedure' Identifier '(' <Params> ')' '{' <Body Procedure> '}'
              | Identifier '(' <Formal Parameter List> ')' '{' <Body Procedure> '}'

<Params>     ::= <Param> ',' <Params>
               | <Param> | 
               
<Param>      ::= const <Type> Identifier
               |       <Type> Identifier
               
! ===================================================================
! Function n Procedures call
! ===================================================================

<Function Call> ::= Identifier '(' <Formal Parameter List>');'

! ===================================================================
! Type Declaration
! ===================================================================

<Typedef Decl> ::= typedef <Base> Identifier ';'

<Base> ::= <Type>
        | struct Identifier 
        | struct '{' <Struct Def> '}'  

<Struct Decl>  ::= struct Identifier '{' <Struct Def> '}'  ';' 

<Struct Def>   ::= 

! ===================================================================
! Constant Declaration
! =================================================================== 
<Const Decl> ::= 'const' '{' <ConstList> '}' 
              
<ConstList> ::= <Type> <Const> <ConstList> |  

<Const> ::= Identifier '=' <Value> <Delimiter Const> 
                                                                    
<Delimiter Const> ::= ',' <Const> |';'
                                                                                  
<Type> ::= int 
        | real 
        | boolean 
        | string
        
<Value> ::= <Number>
         | <Boolean Literal> 
         | StringLiteral
                               
! ===================================================================
! Variable Declaration
! ==================================================================

<Var Decl> ::= 'var' '{' <VariablesList> '}'
<Index> ::= DecLiteral | Identifier             
<VariablesList> ::= <Type> <Variable> <VariablesList> |  
<Variable> ::= Identifier<Aux>  
<Aux> ::= '=' <Value> <Delimiter Var> | <Delimiter Var>|  <Derived_matrix_vector><Delimiter Var>                                                                
<Delimiter Var> ::= ',' <Variable> |';'
<Derived_matrix_vector> ::= <Vector> | <Matrix>
<Vector> ::= '['<Index>']'     
<Matrix> ::= '['<Index>']' <Vector>  


! ===================================================================
! While
! ===================================================================

<While> ::= 'while' '(' <Conditional Expression> ')' '{' <Body> '}'
         
<While Procedure> ::= 'while' '(' <Conditional Expression> ')' '{' <Body Procedure> '}'
         
<Boolean Literal> ::= 'true'
                    | 'false'

<Conditional Expression> ::= <Boolean Literal> 
                            | <Relational Expression>
                            | <Logical Expression>
                            
! ===================================================================
! if - then - else
! =================================================================== 

<If> ::= 'if' '(' <Conditional Expression><Then> 
<Then> ::= ')' 'then' '{'<Body>'}' <Else>
<Else> ::= 'else' '{' <Body> '}' | 
        
<If Procedure> ::= 'if' '(' <Conditional Expression><Then Procedure> 
<Then Procedure> ::= ')' 'then' '{'<Body Procedure>'}' <Else Procedure>
<Else Procedure> ::= 'else' '{' <Body Procedure> '}' | 

! ===================================================================
! read
! ===================================================================
<Read>  ::= read'(' <Formal Parameter List Read> ');'

! ===================================================================
! print
! ===================================================================

<Print> ::= print'(' <Formal Parameter List>  ');'

! ===================================================================
! Statements
! ===================================================================
<Body>        ::=  <Body><Body Item> 
                 |  
              
<Body Item>  ::=  <Var Decl>
                 | <While>
                 | <If>
                 | <Read>
                 | <Print>
                 | <Normal Stm>
                 | <Function Call>
                 | <Return Statement>

<Return Statement> ::= 'return' ';'
                       | 'return' <Normal Stm>
                       
<Body Procedure>  ::=  <Body Procedure><Body Item Procedure> 
                 |  
              
<Body Item Procedure>  ::=  <Var Decl>
                 | <While Procedure>
                 | <If Procedure>
                 | <Read>
                 | <Print>
                 | <Normal Stm>
                 | <Function Call>
                 
! ===================================================================
! Logical Expressions 
! ===================================================================

<Conditional Operator>  ::= '&&'
                      | '||' 
                                                          
<Logical Expression> ::= Identifier <Conditional Operator> Identifier
                    | <Logical Expression> <Conditional Operator> Identifier
                    | <Logical Expression> <Conditional Operator> <Boolean Literal>
                    | <Boolean Literal> <Conditional Operator> Identifier
                    | <Relational Expression> <Conditional Operator> <Logical Expression>
                    | '!' <Logical Expression>
                    | '!' <Relational Expression>
                    | '!' Identifier
                      
! ===================================================================
! Arithmetic Expressions 
! ===================================================================
<Relational Expression>  ::= <Exp> <Relational>   
               
<Relational> ::= '>'  <Exp> 
               |  '<'  <Exp> 
               |  '<=' <Exp> 
               |  '>=' <Exp>
               |  '==' <Exp>    !Equal
               |  '!=' <Exp>    !Not equal

<Normal Stm> ::= <AssignAux> ';'

<AssignAux>::= <PrefixGlobalLocal><Assign> | <Assign> 
<Assign> ::= Identifier '=' <Exp>
            | <Exp>
              
<Exp> ::= <Term> <Add Exp>
                      
<Add Exp>     ::=  '+'  <Exp>
               |   '-'  <Exp> 
               | 

<Term> ::= <Expression Value> <Mult Exp>

<Mult Exp>    ::= '*' <Term> 
               |  '/' <Term>  
               |

<Expression Value>  ::= '-' <Expression Value> 
               |  Identifier
               | '(' <Exp> ')'
               | <Number>
               | Identifier '()'         
               |<Boolean Literal> 
               |StringLiteral
               

! ===================================================================
! Matrix/Array Atribuition
! ===================================================================

<assignment_vector> ::= <assignment_vector_aux1> | <assignment_vector_aux2> 
<assignment_vector_aux1> ::= '['<Index>']' '=' <Value>
<assignment_vector_aux2> ::= '[' ']' '=' '{'<Value>'}'
<value_assigned_vector> ::= <Value> ',' <value_assigned_vector> | <Value>

<assignment_matrix> ::= <assignment_matrix_aux1> | <assignment_matrix_aux2>
<assignment_matrix_aux1> ::= '['<Index>']' <assignment_vector_aux1>      
<assignment_matrix_aux2> ::= '[' ']' '[' ']' '=' '{' '{' <value_assigned_matrix> '}' <dimensao_matrix2>
<dimensao_matrix2> ::= ',' '{'<value_assigned_matrix> '}' '}'
<value_assigned_matrix> ::= <Value> ',' <value_assigned_matrix> | <Value>

